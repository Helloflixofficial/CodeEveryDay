//Postgresql
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @unique @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]
  category    Category?    @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@map("title")
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

model access_connection {
  chat_id               String   @id @db.VarChar(14)
  allow_connect_to_chat Boolean?
}

model afk_users {
  user_id BigInt    @id @default(autoincrement())
  is_afk  Boolean?
  reason  String?
  time    DateTime? @db.Timestamp(6)
}

model antiflood {
  chat_id String  @id @db.VarChar(14)
  user_id BigInt?
  count   Int?
  limit   Int?
}

model antiflood_settings {
  chat_id    String  @id @db.VarChar(14)
  flood_type Int?
  value      String?
}

model approval {
  chat_id String @db.VarChar(14)
  user_id BigInt

  @@id([chat_id, user_id])
}

model bans_feds {
  fed_id     String
  user_id    String  @db.VarChar(14)
  first_name String
  last_name  String?
  user_name  String?
  reason     String?
  time       Int?

  @@id([fed_id, user_id])
}

model blacklist {
  chat_id String @db.VarChar(14)
  trigger String

  @@id([chat_id, trigger])
}

model blacklist_settings {
  chat_id        String  @id @db.VarChar(14)
  blacklist_type Int?
  value          String?
}

model blacklist_stickers {
  chat_id String @db.VarChar(14)
  trigger String

  @@id([chat_id, trigger])
}

model blsticker_settings {
  chat_id        String  @id @db.VarChar(14)
  blacklist_type Int?
  value          String?
}

model chat_feds {
  chat_id   String  @id @db.VarChar(14)
  chat_name String?
  fed_id    String?
}

model chat_members {
  priv_chat_id Int    @id @default(autoincrement())
  chat         String @db.VarChar(14)
  user         BigInt

  @@unique([chat, user], map: "_chat_members_uc")
}

model chats {
  chat_id   String @id @db.VarChar(14)
  chat_name String
}

model clean_service {
  chat_id       String   @id @db.VarChar(14)
  clean_service Boolean?
}

model connection {
  user_id BigInt  @id @default(autoincrement())
  chat_id String? @db.VarChar(14)
}

model connection_history {
  user_id   BigInt
  chat_id   String  @db.VarChar(14)
  chat_name String?
  conn_time BigInt?

  @@id([user_id, chat_id])
}

model cust_filter_urls {
  id        Int      @default(autoincrement())
  chat_id   String   @db.VarChar(14)
  keyword   String
  name      String
  url       String
  same_line Boolean?

  @@id([id, chat_id, keyword])
}

model cust_filters {
  chat_id           String  @db.VarChar(14)
  keyword           String
  reply             String
  reply_text        String?
  file_type         Int
  file_id           String?
  has_buttons       Boolean
  has_media_spoiler Boolean

  @@id([chat_id, keyword])
}

model disabled_commands {
  chat_id String @db.VarChar(14)
  command String

  @@id([chat_id, command])
}

model feds {
  owner_id  String? @db.VarChar(14)
  fed_name  String?
  fed_id    String  @id
  fed_rules String?
  fed_log   String?
  fed_users String?
}

model feds_settings {
  user_id       BigInt   @id @default(autoincrement())
  should_report Boolean?
}

model feds_subs {
  fed_id   String
  fed_subs String

  @@id([fed_id, fed_subs])
}

model gban_settings {
  chat_id String  @id @db.VarChar(14)
  setting Boolean
}

model gbans {
  user_id BigInt  @id @default(autoincrement())
  name    String
  reason  String?
}

model human_checks {
  user_id     BigInt
  chat_id     String   @db.VarChar(14)
  human_check Boolean?

  @@id([user_id, chat_id])
}

model kuki_chats {
  chat_id String @id @db.VarChar(14)
}

model leave_urls {
  id        Int      @default(autoincrement())
  chat_id   String   @db.VarChar(14)
  name      String
  url       String
  same_line Boolean?

  @@id([id, chat_id])
}

model log_channel_setting {
  chat_id    BigInt   @id @default(autoincrement())
  log_joins  Boolean?
  log_leave  Boolean?
  log_warn   Boolean?
  log_action Boolean?
  log_report Boolean?
}

model log_channels {
  chat_id     String @id @db.VarChar(14)
  log_channel String @db.VarChar(14)
}

model note_urls {
  id        Int      @default(autoincrement())
  chat_id   String   @db.VarChar(14)
  note_name String
  name      String
  url       String
  same_line Boolean?

  @@id([id, chat_id, note_name])
}

model notes {
  chat_id     String   @db.VarChar(14)
  name        String
  value       String
  file        String?
  is_reply    Boolean?
  has_buttons Boolean?
  msgtype     Int?

  @@id([chat_id, name])
}

model rules {
  chat_id String  @id @db.VarChar(14)
  rules   String?
}

model users {
  user_id  BigInt  @id @default(autoincrement())
  username String?
}

model warn_filters {
  chat_id String @db.VarChar(14)
  keyword String
  reply   String

  @@id([chat_id, keyword])
}

model warn_settings {
  chat_id    String   @id @db.VarChar(14)
  warn_limit Int?
  soft_warn  Boolean?
}

model warns {
  user_id   BigInt
  chat_id   String   @db.VarChar(14)
  num_warns Int?
  reasons   String[]

  @@id([user_id, chat_id])
}

model welcome_mutes {
  chat_id      String  @id @db.VarChar(14)
  welcomemutes String?
}

model welcome_pref {
  chat_id        String   @id @db.VarChar(14)
  should_welcome Boolean?
  should_goodbye Boolean?
  custom_content String?
  custom_welcome String?
  welcome_type   Int?
  custom_leave   String?
  leave_type     Int?
  clean_welcome  BigInt?
}

model welcome_urls {
  id        Int      @default(autoincrement())
  chat_id   String   @db.VarChar(14)
  name      String
  url       String
  same_line Boolean?

  @@id([id, chat_id])
}
